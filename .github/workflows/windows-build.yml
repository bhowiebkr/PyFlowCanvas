# .github/workflows/windows-build.yml
# GitHub Actions workflow to build a standalone Windows executable and create a release.
# This version correctly downloads the 'install_only' Python package and bootstraps pip into it.

name: Build and Release Windows App

on:
  push:
    tags:
      - 'v*' # Triggers on version tags like v1.0.0

jobs:
  build-windows:
    runs-on: windows-latest
    permissions:
      contents: write      # To create the release
      pull-requests: read  # To read PRs for the changelog

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python for Nuitka build process
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Prepare Portable Python Runtime
        shell: pwsh
        run: |
          # 1. Download the correct 'install_only' standalone Python distribution in .tar.gz format.
          $pythonVersion = "3.11.13"
          $releaseTag = "20250808"
          $fileName = "cpython-$($pythonVersion)+$($releaseTag)-x86_64-pc-windows-msvc-install_only.tar.gz"
          $url = "https://github.com/astral-sh/python-build-standalone/releases/download/$releaseTag/$fileName"
          
          Write-Host "Downloading Python runtime from $url"
          Invoke-WebRequest -Uri $url -OutFile "python-standalone.tar.gz"

          # 2. Decompress the archive. tar on Windows runners handles .gz natively.
          Write-Host "Decompressing Python runtime..."
          tar -xzf python-standalone.tar.gz
          
          # 3. Move the contents to the 'python_runtime' directory
          Move-Item -Path "python\*" -Destination "python_runtime"
          Remove-Item "python" -Recurse
          
          # --- Verification Step 1 ---
          Write-Host "Verifying python.exe exists..."
          if (-not (Test-Path "python_runtime\python.exe")) {
            Write-Host "CRITICAL ERROR: python.exe not found after extraction. Build cannot continue."
            exit 1
          }
          
          # 4. Download the official pip bootstrap script.
          Write-Host "Downloading get-pip.py..."
          Invoke-WebRequest -Uri "https://bootstrap.pypa.io/get-pip.py" -OutFile "python_runtime\get-pip.py"
          
          # 5. Run the bootstrap script to install pip into the portable runtime.
          Write-Host "Installing pip into the portable runtime..."
          .\python_runtime\python.exe .\python_runtime\get-pip.py
          
          # --- Verification Step 2 ---
          Write-Host "Verifying pip.exe exists..."
          if (-not (Test-Path "python_runtime\Scripts\pip.exe")) {
            Write-Host "CRITICAL ERROR: pip.exe not found after installation. Build cannot continue."
            exit 1
          }

          # 6. Clean up the bootstrap script.
          Remove-Item "python_runtime\get-pip.py"
          Write-Host "Python runtime prepared successfully."

      - name: Cache Pip and Nuitka
        uses: actions/cache@v4
        with:
          path: |
            ~\.cache\pip
            ~\AppData\Local\Nuitka\Nuitka\Cache
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install Nuitka and PySide6
        run: pip install -r requirements.txt

      - name: Build app with Nuitka
        run: |
          python -m nuitka `
            --standalone `
            --enable-plugin=pyside6 `
            --include-qt-plugins=platforms `
            --output-dir=NodeEditor_Build `
            --nofollow-import-to=tkinter,unittest,setuptools,pip,wheel `
            --windows-disable-console `
            --remove-output `
            --lto=yes `
            --include-data-dir=examples=examples `
            --include-data-file=dark_theme.qss=dark_theme.qss `
            --include-data-dir=python_runtime=python_runtime `
            --assume-yes-for-downloads `
            main.py

      - name: Prepare artifact for release
        id: package
        run: |
          $version = "${{ github.ref_name }}"
          $build_dir = "NodeEditor_Build"
          $dist_dir = Join-Path $build_dir "main.dist"
          
          $new_dir_name = "NodeEditor $version"
          $zip_file_name = "NodeEditor_Windows_$version.zip"
          
          Rename-Item -Path $dist_dir -NewName $new_dir_name
          
          $archive_source = Join-Path $build_dir $new_dir_name
          Compress-Archive -Path "$archive_source\*" -DestinationPath $zip_file_name
          
          echo "zip_name=$zip_file_name" >> $env:GITHUB_OUTPUT

      - name: Generate changelog
        id: changelog
        uses: mikepenz/release-changelog-builder-action@v4
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create GitHub release
        uses: softprops/action-gh-release@v2
        with:
          name: ${{ github.ref_name }}
          body: |
            ## What's Changed
            ---

            ${{ steps.changelog.outputs.changelog }}
          files: ${{ steps.package.outputs.zip_name }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
