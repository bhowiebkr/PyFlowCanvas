{
    "nodes": [
        {
            "uuid": "config-input",
            "title": "Password Configuration",
            "pos": [100, 200],
            "size": [300, 250],
            "code": "from typing import Tuple\n\n@node_entry\ndef configure_password(length: int, include_uppercase: bool, include_lowercase: bool, include_numbers: bool, include_symbols: bool) -> Tuple[int, bool, bool, bool, bool]:\n    print(f\"Password config: {length} chars, Upper: {include_uppercase}, Lower: {include_lowercase}, Numbers: {include_numbers}, Symbols: {include_symbols}\")\n    return length, include_uppercase, include_lowercase, include_numbers, include_symbols",
            "gui_code": "from PySide6.QtWidgets import QLabel, QSpinBox, QCheckBox, QPushButton\n\nlayout.addWidget(QLabel('Password Length:', parent))\nwidgets['length'] = QSpinBox(parent)\nwidgets['length'].setRange(4, 128)\nwidgets['length'].setValue(12)\nlayout.addWidget(widgets['length'])\n\nwidgets['uppercase'] = QCheckBox('Include Uppercase (A-Z)', parent)\nwidgets['uppercase'].setChecked(True)\nlayout.addWidget(widgets['uppercase'])\n\nwidgets['lowercase'] = QCheckBox('Include Lowercase (a-z)', parent)\nwidgets['lowercase'].setChecked(True)\nlayout.addWidget(widgets['lowercase'])\n\nwidgets['numbers'] = QCheckBox('Include Numbers (0-9)', parent)\nwidgets['numbers'].setChecked(True)\nlayout.addWidget(widgets['numbers'])\n\nwidgets['symbols'] = QCheckBox('Include Symbols (!@#$%)', parent)\nwidgets['symbols'].setChecked(False)\nlayout.addWidget(widgets['symbols'])\n\nwidgets['generate_btn'] = QPushButton('Generate Password', parent)\nlayout.addWidget(widgets['generate_btn'])",
            "gui_get_values_code": "def get_values(widgets):\n    return {\n        'length': widgets['length'].value(),\n        'include_uppercase': widgets['uppercase'].isChecked(),\n        'include_lowercase': widgets['lowercase'].isChecked(),\n        'include_numbers': widgets['numbers'].isChecked(),\n        'include_symbols': widgets['symbols'].isChecked()\n    }\n\ndef set_initial_state(widgets, state):\n    widgets['length'].setValue(state.get('length', 12))\n    widgets['uppercase'].setChecked(state.get('include_uppercase', True))\n    widgets['lowercase'].setChecked(state.get('include_lowercase', True))\n    widgets['numbers'].setChecked(state.get('include_numbers', True))\n    widgets['symbols'].setChecked(state.get('include_symbols', False))",
            "gui_state": {
                "length": 12,
                "include_uppercase": true,
                "include_lowercase": true,
                "include_numbers": true,
                "include_symbols": false
            },
            "colors": {
                "title": "#007bff",
                "body": "#0056b3"
            }
        },
        {
            "uuid": "password-generator",
            "title": "Password Generator Engine",
            "pos": [500, 200],
            "size": [280, 150],
            "code": "import random\nimport string\n\n@node_entry\ndef generate_password(length: int, include_uppercase: bool, include_lowercase: bool, include_numbers: bool, include_symbols: bool) -> str:\n    charset = ''\n    \n    if include_uppercase:\n        charset += string.ascii_uppercase\n    if include_lowercase:\n        charset += string.ascii_lowercase\n    if include_numbers:\n        charset += string.digits\n    if include_symbols:\n        charset += '!@#$%^&*()_+-=[]{}|;:,.<>?'\n    \n    if not charset:\n        return \"Error: No character types selected!\"\n    \n    password = ''.join(random.choice(charset) for _ in range(length))\n    print(f\"Generated password: {password}\")\n    return password",
            "gui_code": "",
            "gui_get_values_code": "",
            "gui_state": {},
            "colors": {
                "title": "#28a745",
                "body": "#1e7e34"
            }
        },
        {
            "uuid": "strength-analyzer",
            "title": "Password Strength Analyzer",
            "pos": [870, 150],
            "size": [300, 200],
            "code": "import re\nfrom typing import Tuple\n\n@node_entry\ndef analyze_strength(password: str) -> Tuple[str, int, str]:\n    score = 0\n    feedback = []\n    \n    # Length check\n    if len(password) >= 12:\n        score += 25\n    elif len(password) >= 8:\n        score += 15\n        feedback.append(\"Consider using 12+ characters\")\n    else:\n        feedback.append(\"Password too short (8+ recommended)\")\n    \n    # Character variety\n    if re.search(r'[A-Z]', password):\n        score += 20\n    else:\n        feedback.append(\"Add uppercase letters\")\n        \n    if re.search(r'[a-z]', password):\n        score += 20\n    else:\n        feedback.append(\"Add lowercase letters\")\n        \n    if re.search(r'[0-9]', password):\n        score += 20\n    else:\n        feedback.append(\"Add numbers\")\n        \n    if re.search(r'[!@#$%^&*()_+\\-=\\[\\]{}|;:,.<>?]', password):\n        score += 15\n    else:\n        feedback.append(\"Add symbols for extra security\")\n    \n    # Determine strength level\n    if score >= 80:\n        strength = \"Very Strong\"\n    elif score >= 60:\n        strength = \"Strong\"\n    elif score >= 40:\n        strength = \"Moderate\"\n    elif score >= 20:\n        strength = \"Weak\"\n    else:\n        strength = \"Very Weak\"\n    \n    feedback_text = \"; \".join(feedback) if feedback else \"Excellent password!\"\n    \n    print(f\"Password strength: {strength} (Score: {score}/100)\")\n    print(f\"Feedback: {feedback_text}\")\n    \n    return strength, score, feedback_text",
            "gui_code": "",
            "gui_get_values_code": "",
            "gui_state": {},
            "colors": {
                "title": "#fd7e14",
                "body": "#e8590c"
            }
        },
        {
            "uuid": "output-display",
            "title": "Password Output & Copy",
            "pos": [1250, 200],
            "size": [350, 300],
            "code": "@node_entry\ndef display_result(password: str, strength: str, score: int, feedback: str) -> str:\n    result = f\"Generated Password: {password}\\n\"\n    result += f\"Strength: {strength} ({score}/100)\\n\"\n    result += f\"Feedback: {feedback}\"\n    print(\"\\n=== PASSWORD GENERATION COMPLETE ===\")\n    print(result)\n    return result",
            "gui_code": "from PySide6.QtWidgets import QLabel, QTextEdit, QPushButton, QLineEdit\nfrom PySide6.QtCore import Qt\nfrom PySide6.QtGui import QFont\n\ntitle_label = QLabel('Generated Password', parent)\ntitle_font = QFont()\ntitle_font.setPointSize(14)\ntitle_font.setBold(True)\ntitle_label.setFont(title_font)\nlayout.addWidget(title_label)\n\nwidgets['password_field'] = QLineEdit(parent)\nwidgets['password_field'].setReadOnly(True)\nwidgets['password_field'].setPlaceholderText('Password will appear here...')\nlayout.addWidget(widgets['password_field'])\n\nwidgets['copy_btn'] = QPushButton('Copy to Clipboard', parent)\nlayout.addWidget(widgets['copy_btn'])\n\nwidgets['strength_display'] = QTextEdit(parent)\nwidgets['strength_display'].setMinimumHeight(120)\nwidgets['strength_display'].setReadOnly(True)\nwidgets['strength_display'].setPlainText('Generate a password to see strength analysis...')\nlayout.addWidget(widgets['strength_display'])\n\nwidgets['new_password_btn'] = QPushButton('Generate New Password', parent)\nlayout.addWidget(widgets['new_password_btn'])",
            "gui_get_values_code": "def get_values(widgets):\n    return {}\n\ndef set_values(widgets, outputs):\n    # Extract password from the result string\n    result = outputs.get('output_1', '')\n    lines = result.split('\\n')\n    if lines:\n        password_line = lines[0]\n        if 'Generated Password: ' in password_line:\n            password = password_line.replace('Generated Password: ', '')\n            widgets['password_field'].setText(password)\n    \n    widgets['strength_display'].setPlainText(result)",
            "gui_state": {},
            "colors": {
                "title": "#6c757d",
                "body": "#545b62"
            }
        }
    ],
    "connections": [
        {
            "start_node_uuid": "config-input",
            "start_pin_name": "exec_out",
            "end_node_uuid": "password-generator",
            "end_pin_name": "exec_in"
        },
        {
            "start_node_uuid": "config-input",
            "start_pin_name": "output_1",
            "end_node_uuid": "password-generator",
            "end_pin_name": "length"
        },
        {
            "start_node_uuid": "config-input",
            "start_pin_name": "output_2",
            "end_node_uuid": "password-generator",
            "end_pin_name": "include_uppercase"
        },
        {
            "start_node_uuid": "config-input",
            "start_pin_name": "output_3",
            "end_node_uuid": "password-generator",
            "end_pin_name": "include_lowercase"
        },
        {
            "start_node_uuid": "config-input",
            "start_pin_name": "output_4",
            "end_node_uuid": "password-generator",
            "end_pin_name": "include_numbers"
        },
        {
            "start_node_uuid": "config-input",
            "start_pin_name": "output_5",
            "end_node_uuid": "password-generator",
            "end_pin_name": "include_symbols"
        },
        {
            "start_node_uuid": "password-generator",
            "start_pin_name": "exec_out",
            "end_node_uuid": "strength-analyzer",
            "end_pin_name": "exec_in"
        },
        {
            "start_node_uuid": "password-generator",
            "start_pin_name": "output_1",
            "end_node_uuid": "strength-analyzer",
            "end_pin_name": "password"
        },
        {
            "start_node_uuid": "strength-analyzer",
            "start_pin_name": "exec_out",
            "end_node_uuid": "output-display",
            "end_pin_name": "exec_in"
        },
        {
            "start_node_uuid": "password-generator",
            "start_pin_name": "output_1",
            "end_node_uuid": "output-display",
            "end_pin_name": "password"
        },
        {
            "start_node_uuid": "strength-analyzer",
            "start_pin_name": "output_1",
            "end_node_uuid": "output-display",
            "end_pin_name": "strength"
        },
        {
            "start_node_uuid": "strength-analyzer",
            "start_pin_name": "output_2",
            "end_node_uuid": "output-display",
            "end_pin_name": "score"
        },
        {
            "start_node_uuid": "strength-analyzer",
            "start_pin_name": "output_3",
            "end_node_uuid": "output-display",
            "end_pin_name": "feedback"
        }
    ],
    "requirements": []
}