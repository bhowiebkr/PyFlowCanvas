{
    "nodes": [
        {
            "uuid": "user-input-node",
            "title": "User Input",
            "pos": [
                6.0,
                95.0
            ],
            "code": "@node_entry\ndef get_user_input(first_name: str, last_name: str) -> str:\n    return f'{first_name} {last_name}'",
            "gui_code": "from PySide6.QtWidgets import QLabel, QLineEdit\n\nlayout.addWidget(QLabel('First Name:', parent))\nwidgets['first_name'] = QLineEdit('Eldrin', parent)\nlayout.addWidget(widgets['first_name'])\n\nlayout.addWidget(QLabel('Last Name:', parent))\nwidgets['last_name'] = QLineEdit('Lightbringer', parent)\nlayout.addWidget(widgets['last_name'])",
            "gui_get_values_code": "def get_values(widgets):\n    return {\n        'first_name': widgets['first_name'].text(),\n        'last_name': widgets['last_name'].text()\n    }\n\ndef set_initial_state(widgets, state):\n    if 'first_name' in state: widgets['first_name'].setText(state['first_name'])\n    if 'last_name' in state: widgets['last_name'].setText(state['last_name'])",
            "gui_state": {
                "first_name": "Eldrin",
                "last_name": "Lightbringer"
            }
        },
        {
            "uuid": "details-input-node",
            "title": "User Details",
            "pos": [
                -4.0,
                458.0
            ],
            "code": "from typing import Tuple\n\n@node_entry\ndef get_user_details(age: int, is_active: bool) -> Tuple[int, bool]:\n    return age, is_active",
            "gui_code": "from PySide6.QtWidgets import QLabel, QSpinBox, QCheckBox\n\nlayout.addWidget(QLabel('Age:', parent))\nwidgets['age'] = QSpinBox(parent)\nwidgets['age'].setRange(18, 120)\nwidgets['age'].setValue(32)\nlayout.addWidget(widgets['age'])\n\nwidgets['is_active'] = QCheckBox('Is Active Member', parent)\nwidgets['is_active'].setChecked(True)\nlayout.addWidget(widgets['is_active'])",
            "gui_get_values_code": "def get_values(widgets):\n    return {\n        'age': widgets['age'].value(),\n        'is_active': widgets['is_active'].isChecked()\n    }\n\ndef set_initial_state(widgets, state):\n    if 'age' in state: widgets['age'].setValue(state['age'])\n    if 'is_active' in state: widgets['is_active'].setChecked(state['is_active'])",
            "gui_state": {
                "age": 32,
                "is_active": true
            }
        },
        {
            "uuid": "username-generator",
            "title": "Generate Username",
            "pos": [
                350.0,
                200.0
            ],
            "code": "@node_entry\ndef generate_username(full_name: str) -> str:\n    return full_name.lower().replace(' ', '_')",
            "gui_code": "",
            "gui_get_values_code": "",
            "gui_state": {}
        },
        {
            "uuid": "generation-calculator",
            "title": "Determine Generation",
            "pos": [
                351.03249999999997,
                371.5175
            ],
            "code": "@node_entry\ndef determine_generation(age: int) -> str:\n    if age <= 28: return 'Gen Z'\n    if age <= 44: return 'Millennial'\n    if age <= 60: return 'Gen X'\n    return 'Boomer'",
            "gui_code": "",
            "gui_get_values_code": "",
            "gui_state": {}
        },
        {
            "uuid": "status-formatter",
            "title": "Format Status",
            "pos": [
                346.0,
                563.0
            ],
            "code": "@node_entry\ndef format_status(active: bool) -> str:\n    return 'Active' if active else 'Inactive'",
            "gui_code": "",
            "gui_get_values_code": "",
            "gui_state": {}
        },
        {
            "uuid": "avatar-generator",
            "title": "Generate Avatar",
            "pos": [
                724.0,
                627.0
            ],
            "code": "from PIL import Image, ImageDraw\n\n@node_entry\ndef generate_avatar(username: str) -> str:\n    try:\n        img = Image.new('RGB', (100, 100), color = 'darkgray')\n        d = ImageDraw.Draw(img)\n        initial = username[0].upper() if username else '?'\n        d.text((45,40), initial, fill='white')\n        filename = f'{username}_avatar.png'\n        img.save(filename)\n        return f'Avatar saved to {filename}'\n    except Exception as e:\n        return f'Failed to create avatar: {e}'",
            "gui_code": "",
            "gui_get_values_code": "",
            "gui_state": {}
        },
        {
            "uuid": "report-assembler",
            "title": "Assemble Report",
            "pos": [
                1044.8075000000001,
                340.41999999999996
            ],
            "code": "@node_entry\ndef assemble_report(full_name: str, username: str, age: int, generation: str, status: str, avatar_status: str) -> str:\n    report = (\n        f'--- USER PROFILE ---\\n'\n        f'Name: {full_name}\\n'\n        f'Username: {username}\\n'\n        f'Age: {age} (Generation: {generation})\\n'\n        f'Status: {status}\\n'\n        f'Avatar: {avatar_status}'\n    )\n    return report",
            "gui_code": "",
            "gui_get_values_code": "",
            "gui_state": {}
        },
        {
            "uuid": "debug-display-node",
            "title": "Debug Display",
            "pos": [
                1361.485,
                340.6449999999999
            ],
            "code": "# BUG FIX: The function must return its input so the value is passed to the GUI logic.\n@node_entry\ndef display_data(final_report: str) -> str:\n    print('--- Final Report Sent to Debug Display ---')\n    return final_report",
            "gui_code": "from PySide6.QtWidgets import QLabel\n\nwidgets['report_label'] = QLabel('Awaiting execution...', parent)\nwidgets['report_label'].setWordWrap(True)\nlayout.addWidget(widgets['report_label'])",
            "gui_get_values_code": "# This node only sets values, it doesn't get them.\ndef get_values(widgets):\n    return {}\n\ndef set_values(widgets, outputs):\n    # BUG FIX: The executor passes a dictionary of the node's OWN outputs.\n    # Since the execution code now returns a value, it will be in 'output_1'.\n    report = outputs.get('output_1', 'No report generated.')\n    widgets['report_label'].setText(report)",
            "gui_state": {}
        },
        {
            "uuid": "reroute-fullname",
            "pos": [
                650.0,
                150.0
            ],
            "is_reroute": true
        },
        {
            "uuid": "reroute-age",
            "pos": [
                721.0,
                539.0
            ],
            "is_reroute": true
        }
    ],
    "connections": [
        {
            "start_node_uuid": "user-input-node",
            "start_pin_name": "output_1",
            "end_node_uuid": "username-generator",
            "end_pin_name": "full_name"
        },
        {
            "start_node_uuid": "user-input-node",
            "start_pin_name": "output_1",
            "end_node_uuid": "reroute-fullname",
            "end_pin_name": "input"
        },
        {
            "start_node_uuid": "reroute-fullname",
            "start_pin_name": "output",
            "end_node_uuid": "report-assembler",
            "end_pin_name": "full_name"
        },
        {
            "start_node_uuid": "details-input-node",
            "start_pin_name": "output_1",
            "end_node_uuid": "generation-calculator",
            "end_pin_name": "age"
        },
        {
            "start_node_uuid": "details-input-node",
            "start_pin_name": "output_1",
            "end_node_uuid": "reroute-age",
            "end_pin_name": "input"
        },
        {
            "start_node_uuid": "reroute-age",
            "start_pin_name": "output",
            "end_node_uuid": "report-assembler",
            "end_pin_name": "age"
        },
        {
            "start_node_uuid": "details-input-node",
            "start_pin_name": "output_2",
            "end_node_uuid": "status-formatter",
            "end_pin_name": "active"
        },
        {
            "start_node_uuid": "username-generator",
            "start_pin_name": "output_1",
            "end_node_uuid": "avatar-generator",
            "end_pin_name": "username"
        },
        {
            "start_node_uuid": "username-generator",
            "start_pin_name": "output_1",
            "end_node_uuid": "report-assembler",
            "end_pin_name": "username"
        },
        {
            "start_node_uuid": "generation-calculator",
            "start_pin_name": "output_1",
            "end_node_uuid": "report-assembler",
            "end_pin_name": "generation"
        },
        {
            "start_node_uuid": "status-formatter",
            "start_pin_name": "output_1",
            "end_node_uuid": "report-assembler",
            "end_pin_name": "status"
        },
        {
            "start_node_uuid": "avatar-generator",
            "start_pin_name": "output_1",
            "end_node_uuid": "report-assembler",
            "end_pin_name": "avatar_status"
        },
        {
            "start_node_uuid": "report-assembler",
            "start_pin_name": "output_1",
            "end_node_uuid": "debug-display-node",
            "end_pin_name": "final_report"
        }
    ],
    "requirements": [
        "Pillow"
    ],
    "venv_path": "E:\\HOME\\PyFlowCanvas\\.venv_graph"
}