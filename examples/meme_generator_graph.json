{
    "nodes": [
        {
            "uuid": "meme-list-scraper",
            "title": "Scrape Meme List",
            "pos": [
                -95.17264343750003,
                274.51478562499994
            ],
            "code": "import requests\nfrom bs4 import BeautifulSoup\nimport json\n\n@node_entry\ndef scrape_meme_list() -> str:\n    try:\n        headers = {'User-Agent': 'Mozilla/5.0'}\n        resp = requests.get('https://imgflip.com/memetemplates', headers=headers)\n        resp.raise_for_status()\n        soup = BeautifulSoup(resp.text, 'html.parser')\n        memes = []\n        for link in soup.select('.mt-box a.mt-title'):\n            name = link.get_text(strip=True)\n            href = link.get('href')\n            if href and name:\n                url = 'https://imgflip.com' + href\n                memes.append({'name': name, 'url': url})\n        # Return the list as a JSON string\n        return json.dumps(memes)\n    except Exception as e:\n        return json.dumps([{'name': f'ERROR: {e}', 'url': ''}])",
            "gui_code": "",
            "gui_get_values_code": "",
            "gui_state": {},
            "colors": {
                "title": "#2a2a2a",
                "body": "#141414"
            }
        },
        {
            "uuid": "meme-selector",
            "title": "Meme Selector",
            "pos": [
                208.49250000000006,
                253.40999999999994
            ],
            "code": "@node_entry\ndef meme_selector(selected_url: str) -> str:\n    # This node simply passes the selected URL through.\n    if not selected_url:\n        return 'ERROR: No meme selected from the list.'\n    return selected_url",
            "gui_code": "from PySide6.QtWidgets import QLabel, QListWidget\n\nlayout.addWidget(QLabel('Select Meme Template:', parent))\nwidgets['meme_list'] = QListWidget(parent)\nwidgets['meme_list'].setMinimumHeight(200)\nlayout.addWidget(widgets['meme_list'])",
            "gui_get_values_code": "import json\n\ndef get_values(widgets):\n    # Get the selected item and extract its URL\n    item = widgets['meme_list'].currentItem()\n    if item:\n        try:\n            # The URL is stored in the item's data\n            return {'selected_url': item.data(32)}\n        except Exception:\n            return {'selected_url': ''}\n    return {'selected_url': ''}\n\ndef set_values(widgets, outputs):\n    # This function is called when the node receives its input data\n    meme_data_str = outputs.get('meme_data', '[]')\n    try:\n        memes = json.loads(meme_data_str)\n        widgets['meme_list'].clear()\n        for meme in memes:\n            from PySide6.QtWidgets import QListWidgetItem\n            item = QListWidgetItem(meme['name'])\n            item.setData(32, meme['url']) # Store URL in the item's data role\n            widgets['meme_list'].addItem(item)\n    except json.JSONDecodeError:\n        widgets['meme_list'].clear()\n        widgets['meme_list'].addItem('Error: Invalid meme list data')",
            "gui_state": {
                "selected_url": ""
            },
            "colors": {
                "title": "#2a2a2a",
                "body": "#141414"
            }
        },
        {
            "uuid": "fetch-meme-template",
            "title": "Fetch Meme Template",
            "pos": [
                525.685,
                270.60249999999996
            ],
            "code": "import requests\nfrom bs4 import BeautifulSoup\nfrom urllib.parse import urljoin\n\n@node_entry\ndef fetch_template_image(template_url: str) -> str:\n    if not template_url or template_url.startswith('ERROR'):\n        return template_url\n    try:\n        headers = {'User-Agent': 'Mozilla/5.0'}\n        page_response = requests.get(template_url, headers=headers)\n        page_response.raise_for_status()\n        soup = BeautifulSoup(page_response.text, 'html.parser')\n        img_tag = soup.find('img', {'id': 'im'})\n        if not img_tag or not img_tag.get('src'):\n            return 'ERROR: Could not find template image on page.'\n        \n        img_src = img_tag.get('src')\n        img_url = urljoin(template_url, img_src)\n\n        img_response = requests.get(img_url, headers=headers)\n        img_response.raise_for_status()\n\n        output_filename = 'downloaded_template.jpg'\n        with open(output_filename, 'wb') as f:\n            f.write(img_response.content)\n        return output_filename\n    except Exception as e:\n        return f'ERROR: {e}'",
            "gui_code": "",
            "gui_get_values_code": "",
            "gui_state": {},
            "colors": {
                "title": "#2a2a2a",
                "body": "#141414"
            }
        },
        {
            "uuid": "meme-text-input",
            "title": "Meme Text",
            "pos": [
                530.7143678124997,
                452.01135718750004
            ],
            "code": "from typing import Tuple\n\n@node_entry\ndef get_meme_text(top_text: str, bottom_text: str) -> Tuple[str, str]:\n    return top_text, bottom_text",
            "gui_code": "from PySide6.QtWidgets import QLabel, QLineEdit\n\nlayout.addWidget(QLabel('Top Text:', parent))\nwidgets['top_text'] = QLineEdit('WHEN YOU REFACTOR THE GRAPH', parent)\nlayout.addWidget(widgets['top_text'])\n\nlayout.addWidget(QLabel('Bottom Text:', parent))\nwidgets['bottom_text'] = QLineEdit('SO IT ACTUALLY WORKS', parent)\nlayout.addWidget(widgets['bottom_text'])",
            "gui_get_values_code": "def get_values(widgets):\n    return {\n        'top_text': widgets['top_text'].text(),\n        'bottom_text': widgets['bottom_text'].text()\n    }\n\ndef set_initial_state(widgets, state):\n    if 'top_text' in state: widgets['top_text'].setText(state['top_text'])\n    if 'bottom_text' in state: widgets['bottom_text'].setText(state['bottom_text'])",
            "gui_state": {
                "top_text": "WHEN YOU REFACTOR THE GRAPH",
                "bottom_text": "SO IT ACTUALLY WORKS"
            },
            "colors": {
                "title": "#2a2a2a",
                "body": "#141414"
            }
        },
        {
            "uuid": "font-settings",
            "title": "Font Settings",
            "pos": [
                559.1811474999998,
                735.6127206249998
            ],
            "code": "@node_entry\ndef get_font_settings(font_size: int) -> int:\n    return font_size",
            "gui_code": "from PySide6.QtWidgets import QLabel, QSpinBox\n\nlayout.addWidget(QLabel('Font Size:', parent))\nwidgets['font_size'] = QSpinBox(parent)\nwidgets['font_size'].setRange(10, 100)\nwidgets['font_size'].setValue(40)\nlayout.addWidget(widgets['font_size'])",
            "gui_get_values_code": "def get_values(widgets):\n    return {'font_size': widgets['font_size'].value()}\n\ndef set_initial_state(widgets, state):\n    if 'font_size' in state: widgets['font_size'].setValue(state['font_size'])",
            "gui_state": {
                "font_size": 40
            },
            "colors": {
                "title": "#2a2a2a",
                "body": "#141414"
            }
        },
        {
            "uuid": "render-meme",
            "title": "Render Meme",
            "pos": [
                905.3871484374997,
                348.1161428124999
            ],
            "code": "from PIL import Image, ImageDraw, ImageFont\n\n@node_entry\ndef render_meme(base_image_path: str, top_text: str, bottom_text: str, font_size: int) -> str:\n    if not base_image_path or base_image_path.startswith('ERROR'):\n        return base_image_path\n    try:\n        img = Image.open(base_image_path)\n        draw = ImageDraw.Draw(img)\n        try:\n            font = ImageFont.truetype(\"arial.ttf\", font_size)\n        except IOError:\n            font = ImageFont.load_default()\n\n        def draw_text_with_outline(pos, text, font, draw_context):\n            x, y = pos\n            draw_context.text((x-2, y-2), text, font=font, fill='black')\n            draw_context.text((x+2, y-2), text, font=font, fill='black')\n            draw_context.text((x-2, y+2), text, font=font, fill='black')\n            draw_context.text((x+2, y+2), text, font=font, fill='black')\n            draw_context.text(pos, text, font=font, fill='white')\n\n        top_text_bbox = draw.textbbox((0,0), top_text.upper(), font=font)\n        top_text_width = top_text_bbox[2] - top_text_bbox[0]\n        top_pos = ((img.width - top_text_width) / 2, 10)\n\n        bottom_text_bbox = draw.textbbox((0,0), bottom_text.upper(), font=font)\n        bottom_text_width = bottom_text_bbox[2] - bottom_text_bbox[0]\n        bottom_text_height = bottom_text_bbox[3] - bottom_text_bbox[1]\n        bottom_pos = ((img.width - bottom_text_width) / 2, img.height - bottom_text_height - 10)\n\n        draw_text_with_outline(top_pos, top_text.upper(), font, draw)\n        draw_text_with_outline(bottom_pos, bottom_text.upper(), font, draw)\n\n        output_filename = 'final_meme.png'\n        img.save(output_filename)\n        return output_filename\n    except Exception as e:\n        return f'ERROR: {e}'",
            "gui_code": "",
            "gui_get_values_code": "",
            "gui_state": {},
            "colors": {
                "title": "#5c2a9d",
                "body": "#3c1d63"
            }
        },
        {
            "uuid": "image-preview",
            "title": "Image Preview",
            "pos": [
                1220.074006875,
                347.09599937499996
            ],
            "code": "@node_entry\ndef show_image(image_path: str) -> str:\n    return image_path",
            "gui_code": "from PySide6.QtWidgets import QLabel\nfrom PySide6.QtGui import QPixmap\nfrom PySide6.QtCore import Qt\n\nwidgets['image_label'] = QLabel('Execute graph to see preview...', parent)\nwidgets['image_label'].setMinimumSize(250, 200)\nwidgets['image_label'].setAlignment(Qt.AlignCenter)\nwidgets['image_label'].setStyleSheet('border: 1px solid #555;')\nlayout.addWidget(widgets['image_label'])",
            "gui_get_values_code": "def get_values(widgets):\n    return {}\n\ndef set_values(widgets, outputs):\n    from PySide6.QtGui import QPixmap\n    from PySide6.QtCore import Qt\n    image_path = outputs.get('output_1')\n    if image_path and not image_path.startswith('ERROR'):\n        pixmap = QPixmap(image_path)\n        if not pixmap.isNull():\n            scaled_pixmap = pixmap.scaled(widgets['image_label'].size(), Qt.KeepAspectRatio, Qt.SmoothTransformation)\n            widgets['image_label'].setPixmap(scaled_pixmap)\n        else:\n            widgets['image_label'].setText(f'Error: Could not load\\n{image_path}')\n    else:\n        widgets['image_label'].setText(f'Execution failed:\\n{image_path}')",
            "gui_state": {},
            "colors": {
                "title": "#2a2a2a",
                "body": "#141414"
            }
        }
    ],
    "connections": [
        {
            "start_node_uuid": "meme-selector",
            "start_pin_name": "output_1",
            "end_node_uuid": "fetch-meme-template",
            "end_pin_name": "template_url"
        },
        {
            "start_node_uuid": "fetch-meme-template",
            "start_pin_name": "output_1",
            "end_node_uuid": "render-meme",
            "end_pin_name": "base_image_path"
        },
        {
            "start_node_uuid": "meme-text-input",
            "start_pin_name": "output_1",
            "end_node_uuid": "render-meme",
            "end_pin_name": "top_text"
        },
        {
            "start_node_uuid": "meme-text-input",
            "start_pin_name": "output_2",
            "end_node_uuid": "render-meme",
            "end_pin_name": "bottom_text"
        },
        {
            "start_node_uuid": "font-settings",
            "start_pin_name": "output_1",
            "end_node_uuid": "render-meme",
            "end_pin_name": "font_size"
        },
        {
            "start_node_uuid": "render-meme",
            "start_pin_name": "output_1",
            "end_node_uuid": "image-preview",
            "end_pin_name": "image_path"
        },
        {
            "start_node_uuid": "meme-list-scraper",
            "start_pin_name": "output_1",
            "end_node_uuid": "meme-selector",
            "end_pin_name": "selected_url"
        }
    ],
    "requirements": [
        "Pillow",
        "requests",
        "beautifulsoup4"
    ],
    "venv_path": "E:\\HOME\\PyFlowCanvas\\.venv_graph"
}