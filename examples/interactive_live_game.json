{
    "nodes": [
        {
            "uuid": "game-start",
            "title": "Game Start",
            "pos": [100, 200],
            "size": [250, 200],
            "code": "@node_entry\ndef start_game() -> str:\n    print(\"=== ADVENTURE GAME STARTED ===\")\n    print(\"You find yourself at a crossroads...\")\n    return \"Welcome, adventurer!\"",
            "gui_code": "from PySide6.QtWidgets import QLabel, QPushButton\nfrom PySide6.QtCore import Qt\n\nwidgets['start_label'] = QLabel('Click to begin your adventure!', parent)\nwidgets['start_label'].setAlignment(Qt.AlignCenter)\nwidgets['start_label'].setStyleSheet('font-size: 14px; padding: 10px;')\nlayout.addWidget(widgets['start_label'])\n\nwidgets['start_btn'] = QPushButton('🚀 Start Adventure', parent)\nwidgets['start_btn'].setMinimumHeight(40)\nlayout.addWidget(widgets['start_btn'])",
            "gui_get_values_code": "def get_values(widgets):\n    return {}\n\ndef set_values(widgets, outputs):\n    pass\n\n# LIVE MODE: This will be connected automatically\ndef setup_events(widgets, node_executor):\n    '''This function is called in live mode to setup event handlers'''\n    def start_clicked():\n        node_executor.trigger_from_node(node)\n    widgets['start_btn'].clicked.connect(start_clicked)",
            "gui_state": {},
            "colors": {
                "title": "#1e7e34",
                "body": "#155724"
            }
        },
        {
            "uuid": "player-choice",
            "title": "Player Choice Hub",
            "pos": [450, 100],
            "size": [300, 280],
            "code": "@node_entry\ndef handle_choice(welcome_msg: str, choice: str) -> str:\n    print(f\"Player chose: {choice}\")\n    return f\"Choice: {choice}\"",
            "gui_code": "from PySide6.QtWidgets import QLabel, QComboBox, QPushButton\n\nlayout.addWidget(QLabel('Choose your path:', parent))\nwidgets['choice'] = QComboBox(parent)\nwidgets['choice'].addItems(['Forest Path', 'Mountain Trail', 'Cave Entrance', 'River Crossing'])\nlayout.addWidget(widgets['choice'])\n\nwidgets['status_label'] = QLabel('Make your choice and click below!', parent)\nwidgets['status_label'].setWordWrap(True)\nlayout.addWidget(widgets['status_label'])\n\nwidgets['make_choice_btn'] = QPushButton('⚔️ Make Choice & Proceed', parent)\nwidgets['make_choice_btn'].setMinimumHeight(35)\nlayout.addWidget(widgets['make_choice_btn'])",
            "gui_get_values_code": "def get_values(widgets):\n    return {\n        'choice': widgets['choice'].currentText()\n    }\n\ndef set_values(widgets, outputs):\n    welcome = outputs.get('welcome_msg', '')\n    if welcome:\n        widgets['status_label'].setText(f'{welcome}\\n\\nChoose your path:')\n\n# LIVE MODE: Button triggers execution\ndef setup_events(widgets, node_executor):\n    def choice_made():\n        widgets['status_label'].setText('Choice made! Adventure begins...')\n        node_executor.trigger_from_node(node)\n    widgets['make_choice_btn'].clicked.connect(choice_made)",
            "gui_state": {
                "choice": "Forest Path"
            },
            "colors": {
                "title": "#007bff",
                "body": "#0056b3"
            }
        },
        {
            "uuid": "condition-checker",
            "title": "Condition Router",
            "pos": [850, 200],
            "size": [250, 150],
            "code": "@node_entry\ndef route_choice(player_choice: str) -> str:\n    choice = player_choice.split(': ')[1] if ': ' in player_choice else player_choice\n    \n    if choice == 'Forest Path':\n        return 'forest'\n    elif choice == 'Mountain Trail':\n        return 'mountain' \n    elif choice == 'Cave Entrance':\n        return 'cave'\n    else:\n        return 'river'",
            "gui_code": "from PySide6.QtWidgets import QLabel\n\nwidgets['routing_label'] = QLabel('Routing your adventure...', parent)\nwidgets['routing_label'].setWordWrap(True)\nlayout.addWidget(widgets['routing_label'])",
            "gui_get_values_code": "def get_values(widgets):\n    return {}\n\ndef set_values(widgets, outputs):\n    choice = outputs.get('player_choice', 'Unknown')\n    widgets['routing_label'].setText(f'Routing: {choice}')",
            "gui_state": {},
            "colors": {
                "title": "#fd7e14",
                "body": "#e8590c"
            }
        },
        {
            "uuid": "forest-encounter",
            "title": "Forest Adventure",
            "pos": [1200, 50],
            "size": [280, 200],
            "code": "@node_entry\ndef forest_adventure(route: str) -> str:\n    if route == 'forest':\n        import random\n        encounters = [\n            \"You meet a friendly fairy who gives you a magic potion!\",\n            \"A wise old tree shares ancient knowledge with you.\",\n            \"You discover a hidden treasure chest full of gold!\",\n            \"A pack of wolves surrounds you, but they're actually friendly!\"\n        ]\n        result = random.choice(encounters)\n        print(f\"Forest: {result}\")\n        return result\n    return \"This path is not for you.\"",
            "gui_code": "from PySide6.QtWidgets import QLabel, QTextEdit\nfrom PySide6.QtCore import Qt\n\nwidgets['result_text'] = QTextEdit(parent)\nwidgets['result_text'].setMinimumHeight(120)\nwidgets['result_text'].setReadOnly(True)\nwidgets['result_text'].setPlainText('Waiting for forest adventure...')\nlayout.addWidget(widgets['result_text'])",
            "gui_get_values_code": "def get_values(widgets):\n    return {}\n\ndef set_values(widgets, outputs):\n    result = outputs.get('output_1', 'No result')\n    widgets['result_text'].setPlainText(f'FOREST ENCOUNTER:\\n\\n{result}')",
            "gui_state": {},
            "colors": {
                "title": "#28a745",
                "body": "#1e7e34"
            }
        },
        {
            "uuid": "mountain-encounter", 
            "title": "Mountain Challenge",
            "pos": [1200, 300],
            "size": [280, 200],
            "code": "@node_entry\ndef mountain_adventure(route: str) -> str:\n    if route == 'mountain':\n        import random\n        challenges = [\n            \"You climb to a peak and see a magnificent dragon!\",\n            \"An avalanche blocks your path, but you find a secret tunnel.\",\n            \"A mountain goat guides you to a hidden monastery.\",\n            \"You discover ancient ruins with mysterious symbols.\"\n        ]\n        result = random.choice(challenges)\n        print(f\"Mountain: {result}\")\n        return result\n    return \"This path is not for you.\"",
            "gui_code": "from PySide6.QtWidgets import QLabel, QTextEdit\nfrom PySide6.QtCore import Qt\n\nwidgets['result_text'] = QTextEdit(parent)\nwidgets['result_text'].setMinimumHeight(120)\nwidgets['result_text'].setReadOnly(True)\nwidgets['result_text'].setPlainText('Waiting for mountain adventure...')\nlayout.addWidget(widgets['result_text'])",
            "gui_get_values_code": "def get_values(widgets):\n    return {}\n\ndef set_values(widgets, outputs):\n    result = outputs.get('output_1', 'No result')\n    widgets['result_text'].setPlainText(f'MOUNTAIN CHALLENGE:\\n\\n{result}')",
            "gui_state": {},
            "colors": {
                "title": "#6c757d",
                "body": "#545b62"
            }
        },
        {
            "uuid": "cave-encounter",
            "title": "Cave Exploration", 
            "pos": [1200, 550],
            "size": [280, 200],
            "code": "@node_entry\ndef cave_adventure(route: str) -> str:\n    if route == 'cave':\n        import random\n        mysteries = [\n            \"You find an underground lake with glowing fish!\",\n            \"Ancient cave paintings tell the story of your quest.\",\n            \"A sleeping dragon guards a pile of magical artifacts.\",\n            \"Crystal formations create beautiful music in the wind.\"\n        ]\n        result = random.choice(mysteries)\n        print(f\"Cave: {result}\")\n        return result\n    return \"This path is not for you.\"",
            "gui_code": "from PySide6.QtWidgets import QLabel, QTextEdit\nfrom PySide6.QtCore import Qt\n\nwidgets['result_text'] = QTextEdit(parent)\nwidgets['result_text'].setMinimumHeight(120)\nwidgets['result_text'].setReadOnly(True)\nwidgets['result_text'].setPlainText('Waiting for cave exploration...')\nlayout.addWidget(widgets['result_text'])",
            "gui_get_values_code": "def get_values(widgets):\n    return {}\n\ndef set_values(widgets, outputs):\n    result = outputs.get('output_1', 'No result')\n    widgets['result_text'].setPlainText(f'CAVE EXPLORATION:\\n\\n{result}')",
            "gui_state": {},
            "colors": {
                "title": "#6f42c1",
                "body": "#563d7c"
            }
        },
        {
            "uuid": "river-encounter",
            "title": "River Adventure",
            "pos": [1200, 800],
            "size": [280, 200],
            "code": "@node_entry\ndef river_adventure(route: str) -> str:\n    if route == 'river':\n        import random\n        adventures = [\n            \"A magical boat appears to ferry you across!\",\n            \"Mermaids surface and offer you a quest.\",\n            \"You spot a message in a bottle floating downstream.\",\n            \"A wise old turtle shares secrets of the river.\"\n        ]\n        result = random.choice(adventures)\n        print(f\"River: {result}\")\n        return result\n    return \"This path is not for you.\"",
            "gui_code": "from PySide6.QtWidgets import QLabel, QTextEdit\nfrom PySide6.QtCore import Qt\n\nwidgets['result_text'] = QTextEdit(parent)\nwidgets['result_text'].setMinimumHeight(120)\nwidgets['result_text'].setReadOnly(True)\nwidgets['result_text'].setPlainText('Waiting for river adventure...')\nlayout.addWidget(widgets['result_text'])",
            "gui_get_values_code": "def get_values(widgets):\n    return {}\n\ndef set_values(widgets, outputs):\n    result = outputs.get('output_1', 'No result')\n    widgets['result_text'].setPlainText(f'RIVER ADVENTURE:\\n\\n{result}')",
            "gui_state": {},
            "colors": {
                "title": "#17a2b8",
                "body": "#117a8b"
            }
        },
        {
            "uuid": "game-end",
            "title": "Adventure Complete",
            "pos": [1600, 400],
            "size": [300, 300],
            "code": "@node_entry\ndef end_adventure(adventure_result: str) -> str:\n    print(\"\\n=== ADVENTURE COMPLETED ===\")\n    print(f\"Your adventure: {adventure_result}\")\n    print(\"Thank you for playing!\")\n    return f\"Quest completed! {adventure_result}\"",
            "gui_code": "from PySide6.QtWidgets import QLabel, QTextEdit, QPushButton\nfrom PySide6.QtCore import Qt\nfrom PySide6.QtGui import QFont\n\ntitle_label = QLabel('Adventure Summary', parent)\ntitle_font = QFont()\ntitle_font.setPointSize(14)\ntitle_font.setBold(True)\ntitle_label.setFont(title_font)\nlayout.addWidget(title_label)\n\nwidgets['summary_text'] = QTextEdit(parent)\nwidgets['summary_text'].setMinimumHeight(120)\nwidgets['summary_text'].setReadOnly(True)\nwidgets['summary_text'].setPlainText('Complete your adventure to see the summary...')\nlayout.addWidget(widgets['summary_text'])\n\nwidgets['play_again_btn'] = QPushButton('🎮 Play Again', parent)\nwidgets['play_again_btn'].setMinimumHeight(35)\nlayout.addWidget(widgets['play_again_btn'])",
            "gui_get_values_code": "def get_values(widgets):\n    return {}\n\ndef set_values(widgets, outputs):\n    result = outputs.get('output_1', 'No result')\n    widgets['summary_text'].setPlainText(f'{result}\\n\\nYour adventure has concluded. Click Play Again to restart!')\n\n# LIVE MODE: Play Again button restarts the entire graph\ndef setup_events(widgets, node_executor):\n    def restart_game():\n        widgets['summary_text'].setPlainText('Restarting adventure...')\n        node_executor.restart_graph()\n    widgets['play_again_btn'].clicked.connect(restart_game)",
            "gui_state": {},
            "colors": {
                "title": "#ffc107",
                "body": "#e0a800"
            }
        }
    ],
    "connections": [
        {
            "start_node_uuid": "game-start",
            "start_pin_name": "exec_out",
            "end_node_uuid": "player-choice",
            "end_pin_name": "exec_in"
        },
        {
            "start_node_uuid": "game-start", 
            "start_pin_name": "output_1",
            "end_node_uuid": "player-choice",
            "end_pin_name": "welcome_msg"
        },
        {
            "start_node_uuid": "player-choice",
            "start_pin_name": "exec_out",
            "end_node_uuid": "condition-checker",
            "end_pin_name": "exec_in"
        },
        {
            "start_node_uuid": "player-choice",
            "start_pin_name": "output_1", 
            "end_node_uuid": "condition-checker",
            "end_pin_name": "player_choice"
        },
        {
            "start_node_uuid": "condition-checker",
            "start_pin_name": "exec_out",
            "end_node_uuid": "forest-encounter",
            "end_pin_name": "exec_in"
        },
        {
            "start_node_uuid": "condition-checker",
            "start_pin_name": "exec_out", 
            "end_node_uuid": "mountain-encounter",
            "end_pin_name": "exec_in"
        },
        {
            "start_node_uuid": "condition-checker",
            "start_pin_name": "exec_out",
            "end_node_uuid": "cave-encounter", 
            "end_pin_name": "exec_in"
        },
        {
            "start_node_uuid": "condition-checker",
            "start_pin_name": "exec_out",
            "end_node_uuid": "river-encounter",
            "end_pin_name": "exec_in"
        },
        {
            "start_node_uuid": "condition-checker",
            "start_pin_name": "output_1",
            "end_node_uuid": "forest-encounter", 
            "end_pin_name": "route"
        },
        {
            "start_node_uuid": "condition-checker",
            "start_pin_name": "output_1",
            "end_node_uuid": "mountain-encounter",
            "end_pin_name": "route"
        },
        {
            "start_node_uuid": "condition-checker", 
            "start_pin_name": "output_1",
            "end_node_uuid": "cave-encounter",
            "end_pin_name": "route"
        },
        {
            "start_node_uuid": "condition-checker",
            "start_pin_name": "output_1",
            "end_node_uuid": "river-encounter",
            "end_pin_name": "route"
        },
        {
            "start_node_uuid": "forest-encounter",
            "start_pin_name": "exec_out",
            "end_node_uuid": "game-end",
            "end_pin_name": "exec_in"
        },
        {
            "start_node_uuid": "mountain-encounter",
            "start_pin_name": "exec_out", 
            "end_node_uuid": "game-end",
            "end_pin_name": "exec_in"
        },
        {
            "start_node_uuid": "cave-encounter",
            "start_pin_name": "exec_out",
            "end_node_uuid": "game-end",
            "end_pin_name": "exec_in"
        },
        {
            "start_node_uuid": "river-encounter",
            "start_pin_name": "exec_out",
            "end_node_uuid": "game-end",
            "end_pin_name": "exec_in"
        },
        {
            "start_node_uuid": "forest-encounter",
            "start_pin_name": "output_1",
            "end_node_uuid": "game-end",
            "end_pin_name": "adventure_result"
        },
        {
            "start_node_uuid": "mountain-encounter",
            "start_pin_name": "output_1",
            "end_node_uuid": "game-end", 
            "end_pin_name": "adventure_result"
        },
        {
            "start_node_uuid": "cave-encounter",
            "start_pin_name": "output_1",
            "end_node_uuid": "game-end",
            "end_pin_name": "adventure_result"
        },
        {
            "start_node_uuid": "river-encounter",
            "start_pin_name": "output_1",
            "end_node_uuid": "game-end",
            "end_pin_name": "adventure_result"
        }
    ],
    "requirements": []
}