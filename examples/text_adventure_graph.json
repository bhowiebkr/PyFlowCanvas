{
    "nodes": [
        {
            "uuid": "char-start-name",
            "title": "Player Name",
            "pos": [
                -297.60999999999996,
                57.17000000000003
            ],
            "code": "@node_entry\ndef get_player_name() -> str:\n    return 'Eldrin'",
            "gui_code": "",
            "gui_get_values_code": "",
            "gui_state": {}
        },
        {
            "uuid": "char-start-health",
            "title": "Player Health",
            "pos": [
                -339.92999999999995,
                331.48499999999996
            ],
            "code": "@node_entry\ndef get_player_health() -> int:\n    return 100",
            "gui_code": "",
            "gui_get_values_code": "",
            "gui_state": {}
        },
        {
            "uuid": "char-start-luck",
            "title": "Player Luck",
            "pos": [
                -375.63750000000005,
                699.6975
            ],
            "code": "@node_entry\ndef get_player_luck() -> float:\n    return 0.75",
            "gui_code": "",
            "gui_get_values_code": "",
            "gui_state": {}
        },
        {
            "uuid": "intro-text",
            "title": "Story Intro",
            "pos": [
                64.54749999999999,
                155.03500000000003
            ],
            "code": "@node_entry\ndef generate_intro(name: str, health: int, luck: float) -> str:\n    return f'Welcome, {name}. You begin your quest with {health} health and a luck score of {luck:.2f}. Before you lies a dark cave.'",
            "gui_code": "",
            "gui_get_values_code": "",
            "gui_state": {}
        },
        {
            "uuid": "intro-printer",
            "title": "Print Intro",
            "pos": [
                359.2575,
                155.03500000000003
            ],
            "code": "@node_entry\ndef print_intro(message: str):\n    print(message)",
            "gui_code": "",
            "gui_get_values_code": "",
            "gui_state": {}
        },
        {
            "uuid": "choice1-bool",
            "title": "Choice: Enter Cave?",
            "pos": [
                104.22250000000003,
                349.6175
            ],
            "code": "@node_entry\ndef make_choice_one() -> bool:\n    # True to enter, False to go around\n    return True",
            "gui_code": "",
            "gui_get_values_code": "",
            "gui_state": {}
        },
        {
            "uuid": "path1a-enter-cave",
            "title": "Path: Enter Cave",
            "pos": [
                93.43500000000029,
                488.8625000000003
            ],
            "code": "from typing import Tuple\n\n@node_entry\ndef enter_cave(current_health: int) -> Tuple[int, str]:\n    damage = 25\n    new_health = current_health - damage\n    story = f'You enter the cave and are attacked by a giant bat! You lose {damage} health.'\n    return new_health, story",
            "gui_code": "",
            "gui_get_values_code": "",
            "gui_state": {}
        },
        {
            "uuid": "path1b-go-around",
            "title": "Path: Go Around",
            "pos": [
                89.46750000000014,
                636.2175000000001
            ],
            "code": "from typing import Tuple\n\n@node_entry\ndef go_around(current_health: int) -> Tuple[int, str]:\n    healing = 15\n    new_health = current_health + healing\n    if new_health > 100:\n        new_health = 100\n    story = f'You go around the cave and find a healing herb. You gain {healing} health.'\n    return new_health, story",
            "gui_code": "",
            "gui_get_values_code": "",
            "gui_state": {}
        },
        {
            "uuid": "path1-merger",
            "title": "Merge Path 1",
            "pos": [
                417.2399999999999,
                444.8374999999999
            ],
            "code": "from typing import Tuple\n\n@node_entry\ndef merge_path_one(choice: bool, health_a: int, story_a: str, health_b: int, story_b: str) -> Tuple[int, str]:\n    if choice:\n        return health_a, story_a\n    else:\n        return health_b, story_b",
            "gui_code": "",
            "gui_get_values_code": "",
            "gui_state": {}
        },
        {
            "uuid": "story-update1-printer",
            "title": "Print Story Update 1",
            "pos": [
                778.0750000000003,
                480.54499999999996
            ],
            "code": "@node_entry\ndef print_story_update(message: str):\n    print(message)",
            "gui_code": "",
            "gui_get_values_code": "",
            "gui_state": {}
        },
        {
            "uuid": "river-text",
            "title": "Story: The River",
            "pos": [
                950.0,
                200.0
            ],
            "code": "@node_entry\ndef river_story(name: str) -> str:\n    return f'{name}, you arrive at a wide river. You can try to swim across or build a raft.'",
            "gui_code": "",
            "gui_get_values_code": "",
            "gui_state": {}
        },
        {
            "uuid": "river-printer",
            "title": "Print River Story",
            "pos": [
                1250.0,
                200.0
            ],
            "code": "@node_entry\ndef print_river(message: str):\n    print(message)",
            "gui_code": "",
            "gui_get_values_code": "",
            "gui_state": {}
        },
        {
            "uuid": "choice2-bool",
            "title": "Choice: Swim River?",
            "pos": [
                1103.4099999999996,
                344.885
            ],
            "code": "@node_entry\ndef make_choice_two() -> bool:\n    # True to swim, False to build raft\n    return False",
            "gui_code": "",
            "gui_get_values_code": "",
            "gui_state": {}
        },
        {
            "uuid": "path2a-swim-river",
            "title": "Path: Swim River",
            "pos": [
                1123.0400000000004,
                502.645
            ],
            "code": "from typing import Tuple\n\n@node_entry\ndef swim_river(current_health: int, luck: float) -> Tuple[int, str]:\n    if luck > 0.5:\n        story = 'Your strong swimming and good luck see you safely across the river.'\n        return current_health, story\n    else:\n        damage = 40\n        new_health = current_health - damage\n        story = f'The current is too strong! You are battered against rocks and lose {damage} health.'\n        return new_health, story",
            "gui_code": "",
            "gui_get_values_code": "",
            "gui_state": {}
        },
        {
            "uuid": "path2b-build-raft",
            "title": "Path: Build Raft",
            "pos": [
                1125.6849999999997,
                665.8699999999999
            ],
            "code": "from typing import Tuple\n\n@node_entry\ndef build_raft(current_health: int) -> Tuple[int, str]:\n    story = 'You spend time building a sturdy raft and cross the river without incident.'\n    return current_health, story",
            "gui_code": "",
            "gui_get_values_code": "",
            "gui_state": {}
        },
        {
            "uuid": "path2-merger",
            "title": "Merge Path 2",
            "pos": [
                1456.1025000000002,
                481.10249999999996
            ],
            "code": "from typing import Tuple\n\n@node_entry\ndef merge_path_two(choice: bool, health_a: int, story_a: str, health_b: int, story_b: str) -> Tuple[int, str]:\n    return (health_a, story_a) if choice else (health_b, story_b)",
            "gui_code": "",
            "gui_get_values_code": "",
            "gui_state": {}
        },
        {
            "uuid": "story-update2-printer",
            "title": "Print Story Update 2",
            "pos": [
                1765.3599999999997,
                659.6399999999999
            ],
            "code": "@node_entry\ndef print_story_update_2(message: str):\n    print(message)",
            "gui_code": "",
            "gui_get_values_code": "",
            "gui_state": {}
        },
        {
            "uuid": "treasure-room-text",
            "title": "Story: Treasure Room",
            "pos": [
                1622.5300000000004,
                222.48250000000002
            ],
            "code": "@node_entry\ndef treasure_story() -> str:\n    return 'You have found the treasure room!'",
            "gui_code": "",
            "gui_get_values_code": "",
            "gui_state": {}
        },
        {
            "uuid": "treasure-printer",
            "title": "Print Treasure Story",
            "pos": [
                1926.4975,
                227.77249999999995
            ],
            "code": "@node_entry\ndef print_treasure(message: str):\n    print(message)",
            "gui_code": "",
            "gui_get_values_code": "",
            "gui_state": {}
        },
        {
            "uuid": "final-score-calculator",
            "title": "Calculate Final Score",
            "pos": [
                2160.58,
                464.6750000000002
            ],
            "code": "@node_entry\ndef calculate_score(final_health: int, luck: float) -> int:\n    base_score = 1000\n    health_bonus = final_health * 10\n    luck_bonus = int(luck * 500)\n    return base_score + health_bonus + luck_bonus",
            "gui_code": "",
            "gui_get_values_code": "",
            "gui_state": {}
        },
        {
            "uuid": "final-report-formatter",
            "title": "Format Final Report",
            "pos": [
                2450.0,
                350.0
            ],
            "code": "@node_entry\ndef format_report(name: str, final_health: int, score: int) -> str:\n    ending = 'Congratulations!' if final_health > 0 else 'You have perished.'\n    return f'--- QUEST COMPLETE ---\\nPlayer: {name}\\nFinal Health: {final_health}\\nFinal Score: {score}\\n{ending}'",
            "gui_code": "",
            "gui_get_values_code": "",
            "gui_state": {}
        },
        {
            "uuid": "final-report-printer",
            "title": "Print Final Report",
            "pos": [
                2750.0,
                350.0
            ],
            "code": "@node_entry\ndef print_final_report(report: str):\n    print(report)",
            "gui_code": "",
            "gui_get_values_code": "",
            "gui_state": {}
        },
        {
            "uuid": "reroute-name-1",
            "pos": [
                650.0,
                100.0
            ],
            "is_reroute": true
        },
        {
            "uuid": "reroute-luck-1",
            "pos": [
                979.0949999999999,
                891.7625
            ],
            "is_reroute": true
        },
        {
            "uuid": "reroute-health-1",
            "pos": [
                950.0,
                300.0
            ],
            "is_reroute": true
        },
        {
            "uuid": "4f0239c8-53fa-4b1b-b0bb-6240bca87277",
            "pos": [
                1942.7524999999996,
                894.0099999999998
            ],
            "is_reroute": true
        },
        {
            "uuid": "b14591a7-a0a8-4c95-afda-b46f56290532",
            "pos": [
                2232.3799999999987,
                398.0725
            ],
            "is_reroute": true
        },
        {
            "uuid": "57c7f49d-36ee-4d57-9238-accf150ddc32",
            "pos": [
                2283.9574999999995,
                101.83249999999998
            ],
            "is_reroute": true
        },
        {
            "uuid": "f4fa1a3d-d682-4d55-ad8b-aed90316f68a",
            "pos": [
                148.11999999999995,
                891.3649999999997
            ],
            "is_reroute": true
        }
    ],
    "connections": [
        {
            "start_node_uuid": "char-start-name",
            "start_pin_name": "output_1",
            "end_node_uuid": "intro-text",
            "end_pin_name": "name"
        },
        {
            "start_node_uuid": "char-start-health",
            "start_pin_name": "output_1",
            "end_node_uuid": "intro-text",
            "end_pin_name": "health"
        },
        {
            "start_node_uuid": "char-start-luck",
            "start_pin_name": "output_1",
            "end_node_uuid": "intro-text",
            "end_pin_name": "luck"
        },
        {
            "start_node_uuid": "intro-text",
            "start_pin_name": "output_1",
            "end_node_uuid": "intro-printer",
            "end_pin_name": "message"
        },
        {
            "start_node_uuid": "char-start-health",
            "start_pin_name": "output_1",
            "end_node_uuid": "path1a-enter-cave",
            "end_pin_name": "current_health"
        },
        {
            "start_node_uuid": "char-start-health",
            "start_pin_name": "output_1",
            "end_node_uuid": "path1b-go-around",
            "end_pin_name": "current_health"
        },
        {
            "start_node_uuid": "choice1-bool",
            "start_pin_name": "output_1",
            "end_node_uuid": "path1-merger",
            "end_pin_name": "choice"
        },
        {
            "start_node_uuid": "path1a-enter-cave",
            "start_pin_name": "output_1",
            "end_node_uuid": "path1-merger",
            "end_pin_name": "health_a"
        },
        {
            "start_node_uuid": "path1a-enter-cave",
            "start_pin_name": "output_2",
            "end_node_uuid": "path1-merger",
            "end_pin_name": "story_a"
        },
        {
            "start_node_uuid": "path1b-go-around",
            "start_pin_name": "output_1",
            "end_node_uuid": "path1-merger",
            "end_pin_name": "health_b"
        },
        {
            "start_node_uuid": "path1b-go-around",
            "start_pin_name": "output_2",
            "end_node_uuid": "path1-merger",
            "end_pin_name": "story_b"
        },
        {
            "start_node_uuid": "path1-merger",
            "start_pin_name": "output_2",
            "end_node_uuid": "story-update1-printer",
            "end_pin_name": "message"
        },
        {
            "start_node_uuid": "river-text",
            "start_pin_name": "output_1",
            "end_node_uuid": "river-printer",
            "end_pin_name": "message"
        },
        {
            "start_node_uuid": "choice2-bool",
            "start_pin_name": "output_1",
            "end_node_uuid": "path2-merger",
            "end_pin_name": "choice"
        },
        {
            "start_node_uuid": "path2a-swim-river",
            "start_pin_name": "output_1",
            "end_node_uuid": "path2-merger",
            "end_pin_name": "health_a"
        },
        {
            "start_node_uuid": "path2a-swim-river",
            "start_pin_name": "output_2",
            "end_node_uuid": "path2-merger",
            "end_pin_name": "story_a"
        },
        {
            "start_node_uuid": "path2b-build-raft",
            "start_pin_name": "output_1",
            "end_node_uuid": "path2-merger",
            "end_pin_name": "health_b"
        },
        {
            "start_node_uuid": "path2b-build-raft",
            "start_pin_name": "output_2",
            "end_node_uuid": "path2-merger",
            "end_pin_name": "story_b"
        },
        {
            "start_node_uuid": "path2-merger",
            "start_pin_name": "output_2",
            "end_node_uuid": "story-update2-printer",
            "end_pin_name": "message"
        },
        {
            "start_node_uuid": "treasure-room-text",
            "start_pin_name": "output_1",
            "end_node_uuid": "treasure-printer",
            "end_pin_name": "message"
        },
        {
            "start_node_uuid": "final-score-calculator",
            "start_pin_name": "output_1",
            "end_node_uuid": "final-report-formatter",
            "end_pin_name": "score"
        },
        {
            "start_node_uuid": "final-report-formatter",
            "start_pin_name": "output_1",
            "end_node_uuid": "final-report-printer",
            "end_pin_name": "report"
        },
        {
            "start_node_uuid": "char-start-name",
            "start_pin_name": "output_1",
            "end_node_uuid": "reroute-name-1",
            "end_pin_name": "input"
        },
        {
            "start_node_uuid": "reroute-name-1",
            "start_pin_name": "output",
            "end_node_uuid": "river-text",
            "end_pin_name": "name"
        },
        {
            "start_node_uuid": "reroute-luck-1",
            "start_pin_name": "output",
            "end_node_uuid": "path2a-swim-river",
            "end_pin_name": "luck"
        },
        {
            "start_node_uuid": "path1-merger",
            "start_pin_name": "output_1",
            "end_node_uuid": "reroute-health-1",
            "end_pin_name": "input"
        },
        {
            "start_node_uuid": "reroute-health-1",
            "start_pin_name": "output",
            "end_node_uuid": "path2a-swim-river",
            "end_pin_name": "current_health"
        },
        {
            "start_node_uuid": "reroute-health-1",
            "start_pin_name": "output",
            "end_node_uuid": "path2b-build-raft",
            "end_pin_name": "current_health"
        },
        {
            "start_node_uuid": "path2-merger",
            "start_pin_name": "output_1",
            "end_node_uuid": "final-score-calculator",
            "end_pin_name": "final_health"
        },
        {
            "start_node_uuid": "reroute-luck-1",
            "start_pin_name": "output",
            "end_node_uuid": "4f0239c8-53fa-4b1b-b0bb-6240bca87277",
            "end_pin_name": "input"
        },
        {
            "start_node_uuid": "4f0239c8-53fa-4b1b-b0bb-6240bca87277",
            "start_pin_name": "output",
            "end_node_uuid": "final-score-calculator",
            "end_pin_name": "luck"
        },
        {
            "start_node_uuid": "path2-merger",
            "start_pin_name": "output_1",
            "end_node_uuid": "b14591a7-a0a8-4c95-afda-b46f56290532",
            "end_pin_name": "input"
        },
        {
            "start_node_uuid": "b14591a7-a0a8-4c95-afda-b46f56290532",
            "start_pin_name": "output",
            "end_node_uuid": "final-report-formatter",
            "end_pin_name": "final_health"
        },
        {
            "start_node_uuid": "reroute-name-1",
            "start_pin_name": "output",
            "end_node_uuid": "57c7f49d-36ee-4d57-9238-accf150ddc32",
            "end_pin_name": "input"
        },
        {
            "start_node_uuid": "57c7f49d-36ee-4d57-9238-accf150ddc32",
            "start_pin_name": "output",
            "end_node_uuid": "final-report-formatter",
            "end_pin_name": "name"
        },
        {
            "start_node_uuid": "char-start-luck",
            "start_pin_name": "output_1",
            "end_node_uuid": "f4fa1a3d-d682-4d55-ad8b-aed90316f68a",
            "end_pin_name": "input"
        },
        {
            "start_node_uuid": "f4fa1a3d-d682-4d55-ad8b-aed90316f68a",
            "start_pin_name": "output",
            "end_node_uuid": "reroute-luck-1",
            "end_pin_name": "input"
        }
    ],
    "requirements": [],
    "venv_path": "E:\\HOME\\PyFlowCanvas\\.venv_graph"
}