{
    "nodes": [
        {
            "uuid": "transaction-input",
            "title": "Transaction Input & Parser",
            "pos": [100, 200],
            "size": [300, 300],
            "code": "import datetime\nfrom typing import List, Dict, Tuple\n\n@node_entry\ndef parse_transactions(transactions_text: str, starting_balance: float) -> Tuple[List[Dict], float]:\n    transactions = []\n    lines = [line.strip() for line in transactions_text.split('\\n') if line.strip()]\n    \n    for line in lines:\n        # Expected format: \"date,amount,category,description\"\n        # Example: \"2024-01-15,-50.00,Food,Grocery shopping\"\n        try:\n            parts = [part.strip() for part in line.split(',')]\n            if len(parts) >= 4:\n                date_str = parts[0]\n                amount = float(parts[1])\n                category = parts[2]\n                description = ','.join(parts[3:])  # In case description has commas\n                \n                # Validate date\n                try:\n                    date_obj = datetime.datetime.strptime(date_str, \"%Y-%m-%d\")\n                    date_formatted = date_obj.strftime(\"%Y-%m-%d\")\n                except:\n                    date_formatted = date_str  # Keep original if parsing fails\n                \n                # Categorize transaction type\n                transaction_type = \"Expense\" if amount < 0 else \"Income\"\n                \n                transactions.append({\n                    'date': date_formatted,\n                    'amount': amount,\n                    'category': category,\n                    'description': description,\n                    'type': transaction_type,\n                    'original_line': line\n                })\n            else:\n                print(f\"Skipping invalid line: {line}\")\n        except ValueError as e:\n            print(f\"Error parsing line '{line}': {e}\")\n    \n    # Sort by date\n    transactions.sort(key=lambda x: x['date'])\n    \n    print(f\"\\n=== TRANSACTION PARSING ===\")\n    print(f\"Starting balance: ${starting_balance:.2f}\")\n    print(f\"Parsed {len(transactions)} transactions\")\n    \n    total_income = sum(t['amount'] for t in transactions if t['amount'] > 0)\n    total_expenses = sum(abs(t['amount']) for t in transactions if t['amount'] < 0)\n    \n    print(f\"Total income: ${total_income:.2f}\")\n    print(f\"Total expenses: ${total_expenses:.2f}\")\n    \n    return transactions, starting_balance",
            "gui_code": "from PySide6.QtWidgets import QLabel, QLineEdit, QTextEdit, QPushButton, QDoubleSpinBox\n\nlayout.addWidget(QLabel('Starting Balance ($):', parent))\nwidgets['starting_balance'] = QDoubleSpinBox(parent)\nwidgets['starting_balance'].setRange(-999999, 999999)\nwidgets['starting_balance'].setValue(1000.00)\nwidgets['starting_balance'].setDecimals(2)\nlayout.addWidget(widgets['starting_balance'])\n\nlayout.addWidget(QLabel('Transactions (date,amount,category,description):', parent))\nwidgets['transactions_text'] = QTextEdit(parent)\nwidgets['transactions_text'].setMinimumHeight(180)\nwidgets['transactions_text'].setPlaceholderText('Example:\\n2024-01-15,-50.00,Food,Grocery shopping\\n2024-01-16,2500.00,Salary,Monthly paycheck\\n2024-01-17,-25.50,Transport,Gas station')\nlayout.addWidget(widgets['transactions_text'])\n\nwidgets['parse_btn'] = QPushButton('Parse Transactions', parent)\nlayout.addWidget(widgets['parse_btn'])",
            "gui_get_values_code": "def get_values(widgets):\n    return {\n        'transactions_text': widgets['transactions_text'].toPlainText(),\n        'starting_balance': widgets['starting_balance'].value()\n    }\n\ndef set_initial_state(widgets, state):\n    widgets['transactions_text'].setPlainText(state.get('transactions_text', ''))\n    widgets['starting_balance'].setValue(state.get('starting_balance', 1000.0))",
            "gui_state": {
                "transactions_text": "",
                "starting_balance": 1000.0
            },
            "colors": {
                "title": "#007bff",
                "body": "#0056b3"
            }
        },
        {
            "uuid": "category-analyzer",
            "title": "Category & Pattern Analyzer",
            "pos": [470, 150],
            "size": [300, 250],
            "code": "from typing import List, Dict, Tuple\nfrom collections import defaultdict\nimport datetime\n\n@node_entry\ndef analyze_categories(transactions: List[Dict]) -> Tuple[Dict, Dict, Dict]:\n    if not transactions:\n        return {}, {}, {}\n    \n    # Category analysis\n    category_totals = defaultdict(float)\n    category_counts = defaultdict(int)\n    monthly_spending = defaultdict(float)\n    \n    for transaction in transactions:\n        amount = transaction['amount']\n        category = transaction['category']\n        date = transaction['date']\n        \n        # Category totals (separate income and expenses)\n        if amount < 0:  # Expense\n            category_totals[category] += abs(amount)\n            category_counts[category] += 1\n        \n        # Monthly analysis\n        try:\n            month = date[:7]  # Extract YYYY-MM\n            if amount < 0:\n                monthly_spending[month] += abs(amount)\n        except:\n            pass\n    \n    # Convert to regular dicts and sort\n    category_summary = dict(sorted(category_totals.items(), key=lambda x: x[1], reverse=True))\n    monthly_summary = dict(sorted(monthly_spending.items()))\n    \n    # Calculate patterns\n    patterns = {}\n    if category_summary:\n        total_expenses = sum(category_summary.values())\n        largest_category = max(category_summary.items(), key=lambda x: x[1])\n        \n        patterns['total_expenses'] = total_expenses\n        patterns['largest_category'] = largest_category[0]\n        patterns['largest_amount'] = largest_category[1]\n        patterns['largest_percentage'] = (largest_category[1] / total_expenses) * 100\n        patterns['category_count'] = len(category_summary)\n        patterns['avg_per_category'] = total_expenses / len(category_summary) if category_summary else 0\n    \n    print(f\"\\n=== CATEGORY ANALYSIS ===\")\n    print(f\"Expense categories: {len(category_summary)}\")\n    if patterns:\n        print(f\"Largest category: {patterns['largest_category']} (${patterns['largest_amount']:.2f})\")\n        print(f\"Total expenses: ${patterns['total_expenses']:.2f}\")\n    \n    return category_summary, monthly_summary, patterns",
            "gui_code": "",
            "gui_get_values_code": "",
            "gui_state": {},
            "colors": {
                "title": "#28a745",
                "body": "#1e7e34"
            }
        },
        {
            "uuid": "budget-calculator",
            "title": "Budget & Balance Calculator",
            "pos": [470, 450],
            "size": [300, 250],
            "code": "from typing import List, Dict, Tuple\n\n@node_entry\ndef calculate_budget(transactions: List[Dict], starting_balance: float) -> Tuple[float, float, float, float, Dict]:\n    if not transactions:\n        return starting_balance, 0, 0, starting_balance, {}\n    \n    total_income = sum(t['amount'] for t in transactions if t['amount'] > 0)\n    total_expenses = sum(abs(t['amount']) for t in transactions if t['amount'] < 0)\n    net_change = total_income - total_expenses\n    final_balance = starting_balance + net_change\n    \n    # Calculate running balance for each transaction\n    running_balance = starting_balance\n    balance_history = []\n    \n    for transaction in sorted(transactions, key=lambda x: x['date']):\n        running_balance += transaction['amount']\n        balance_history.append({\n            'date': transaction['date'],\n            'balance': round(running_balance, 2),\n            'transaction': transaction['description'],\n            'amount': transaction['amount']\n        })\n    \n    # Financial health indicators\n    health_metrics = {\n        'income_expense_ratio': total_income / total_expenses if total_expenses > 0 else float('inf'),\n        'savings_rate': (net_change / total_income * 100) if total_income > 0 else 0,\n        'avg_daily_spending': total_expenses / 30 if total_expenses > 0 else 0,\n        'balance_trend': 'Increasing' if net_change > 0 else 'Decreasing',\n        'lowest_balance': min(h['balance'] for h in balance_history) if balance_history else starting_balance\n    }\n    \n    print(f\"\\n=== BUDGET CALCULATION ===\")\n    print(f\"Starting: ${starting_balance:.2f}\")\n    print(f\"Income: ${total_income:.2f}\")\n    print(f\"Expenses: ${total_expenses:.2f}\")\n    print(f\"Net change: ${net_change:.2f}\")\n    print(f\"Final balance: ${final_balance:.2f}\")\n    print(f\"Savings rate: {health_metrics['savings_rate']:.1f}%\")\n    \n    return total_income, total_expenses, net_change, final_balance, health_metrics",
            "gui_code": "",
            "gui_get_values_code": "",
            "gui_state": {},
            "colors": {
                "title": "#fd7e14",
                "body": "#e8590c"
            }
        },
        {
            "uuid": "financial-dashboard",
            "title": "Personal Finance Dashboard",
            "pos": [850, 300],
            "size": [400, 400],
            "code": "from typing import List, Dict\n\n@node_entry\ndef create_finance_dashboard(transactions: List[Dict], starting_balance: float, category_summary: Dict, monthly_summary: Dict, patterns: Dict, total_income: float, total_expenses: float, net_change: float, final_balance: float, health_metrics: Dict) -> str:\n    dashboard = \"\\n\" + \"=\"*65 + \"\\n\"\n    dashboard += \"              PERSONAL FINANCE DASHBOARD\\n\"\n    dashboard += \"=\"*65 + \"\\n\\n\"\n    \n    # Account Overview\n    dashboard += f\"💰 ACCOUNT OVERVIEW\\n\"\n    dashboard += f\"   Starting Balance:    ${starting_balance:10,.2f}\\n\"\n    dashboard += f\"   Final Balance:       ${final_balance:10,.2f}\\n\"\n    dashboard += f\"   Net Change:          ${net_change:10,.2f}\\n\"\n    if net_change >= 0:\n        dashboard += f\"   Status: 📈 POSITIVE\\n\\n\"\n    else:\n        dashboard += f\"   Status: 📉 NEGATIVE\\n\\n\"\n    \n    # Income vs Expenses\n    dashboard += f\"📊 INCOME vs EXPENSES\\n\"\n    dashboard += f\"   Total Income:        ${total_income:10,.2f}\\n\"\n    dashboard += f\"   Total Expenses:      ${total_expenses:10,.2f}\\n\"\n    if total_expenses > 0:\n        ratio = total_income / total_expenses\n        dashboard += f\"   Income/Expense Ratio: {ratio:9.2f}\\n\"\n    dashboard += \"\\n\"\n    \n    # Financial Health\n    if health_metrics:\n        dashboard += f\"🏥 FINANCIAL HEALTH\\n\"\n        dashboard += f\"   Savings Rate:        {health_metrics['savings_rate']:8.1f}%\\n\"\n        dashboard += f\"   Avg Daily Spending:  ${health_metrics['avg_daily_spending']:8.2f}\\n\"\n        dashboard += f\"   Balance Trend:       {health_metrics['balance_trend']}\\n\"\n        dashboard += f\"   Lowest Balance:      ${health_metrics['lowest_balance']:10,.2f}\\n\\n\"\n    \n    # Top Spending Categories\n    if category_summary:\n        dashboard += f\"🛒 TOP SPENDING CATEGORIES\\n\"\n        for i, (category, amount) in enumerate(list(category_summary.items())[:5], 1):\n            percentage = (amount / total_expenses * 100) if total_expenses > 0 else 0\n            dashboard += f\"   {i}. {category:<15} ${amount:8.2f} ({percentage:4.1f}%)\\n\"\n        dashboard += \"\\n\"\n    \n    # Monthly Spending Trend\n    if monthly_summary:\n        dashboard += f\"📅 MONTHLY SPENDING\\n\"\n        for month, amount in monthly_summary.items():\n            dashboard += f\"   {month}:             ${amount:10,.2f}\\n\"\n        dashboard += \"\\n\"\n    \n    # Recent Transactions\n    if transactions:\n        dashboard += f\"📝 RECENT TRANSACTIONS\\n\"\n        recent = sorted(transactions, key=lambda x: x['date'], reverse=True)[:5]\n        for t in recent:\n            sign = \"+\" if t['amount'] > 0 else \"\"\n            dashboard += f\"   {t['date']} {sign}${t['amount']:8.2f} {t['category']:<10} {t['description'][:20]}\\n\"\n        dashboard += \"\\n\"\n    \n    # Financial Insights\n    dashboard += f\"💡 INSIGHTS & RECOMMENDATIONS\\n\"\n    \n    if health_metrics.get('savings_rate', 0) < 0:\n        dashboard += f\"   • ⚠️  You're spending more than earning\\n\"\n    elif health_metrics.get('savings_rate', 0) < 10:\n        dashboard += f\"   • 💡 Try to save at least 10% of income\\n\"\n    else:\n        dashboard += f\"   • ✅ Good savings rate!\\n\"\n    \n    if category_summary and patterns:\n        largest_cat = patterns.get('largest_category', '')\n        largest_pct = patterns.get('largest_percentage', 0)\n        if largest_pct > 40:\n            dashboard += f\"   • ⚠️  {largest_cat} represents {largest_pct:.1f}% of expenses\\n\"\n    \n    if health_metrics.get('lowest_balance', 0) < 0:\n        dashboard += f\"   • ⚠️  Account went negative (${health_metrics['lowest_balance']:.2f})\\n\"\n    \n    dashboard += \"\\n\" + \"=\"*65\n    \n    print(dashboard)\n    return dashboard",
            "gui_code": "from PySide6.QtWidgets import QLabel, QTextEdit, QPushButton\nfrom PySide6.QtCore import Qt\nfrom PySide6.QtGui import QFont\n\ntitle_label = QLabel('Finance Dashboard', parent)\ntitle_font = QFont()\ntitle_font.setPointSize(14)\ntitle_font.setBold(True)\ntitle_label.setFont(title_font)\nlayout.addWidget(title_label)\n\nwidgets['dashboard_display'] = QTextEdit(parent)\nwidgets['dashboard_display'].setMinimumHeight(280)\nwidgets['dashboard_display'].setReadOnly(True)\nwidgets['dashboard_display'].setPlainText('Enter transactions to generate financial dashboard...')\nfont = QFont('Courier New', 9)\nwidgets['dashboard_display'].setFont(font)\nlayout.addWidget(widgets['dashboard_display'])\n\nwidgets['export_btn'] = QPushButton('Export Report', parent)\nlayout.addWidget(widgets['export_btn'])\n\nwidgets['budget_alert_btn'] = QPushButton('Set Budget Alerts', parent)\nlayout.addWidget(widgets['budget_alert_btn'])\n\nwidgets['new_period_btn'] = QPushButton('Start New Period', parent)\nlayout.addWidget(widgets['new_period_btn'])",
            "gui_get_values_code": "def get_values(widgets):\n    return {}\n\ndef set_values(widgets, outputs):\n    dashboard = outputs.get('output_1', 'No dashboard data')\n    widgets['dashboard_display'].setPlainText(dashboard)",
            "gui_state": {},
            "colors": {
                "title": "#6c757d",
                "body": "#545b62"
            }
        }
    ],
    "connections": [
        {
            "start_node_uuid": "transaction-input",
            "start_pin_name": "exec_out",
            "end_node_uuid": "category-analyzer",
            "end_pin_name": "exec_in"
        },
        {
            "start_node_uuid": "transaction-input",
            "start_pin_name": "output_1",
            "end_node_uuid": "category-analyzer",
            "end_pin_name": "transactions"
        },
        {
            "start_node_uuid": "transaction-input",
            "start_pin_name": "exec_out",
            "end_node_uuid": "budget-calculator",
            "end_pin_name": "exec_in"
        },
        {
            "start_node_uuid": "transaction-input",
            "start_pin_name": "output_1",
            "end_node_uuid": "budget-calculator",
            "end_pin_name": "transactions"
        },
        {
            "start_node_uuid": "transaction-input",
            "start_pin_name": "output_2",
            "end_node_uuid": "budget-calculator",
            "end_pin_name": "starting_balance"
        },
        {
            "start_node_uuid": "category-analyzer",
            "start_pin_name": "exec_out",
            "end_node_uuid": "financial-dashboard",
            "end_pin_name": "exec_in"
        },
        {
            "start_node_uuid": "budget-calculator",
            "start_pin_name": "exec_out",
            "end_node_uuid": "financial-dashboard",
            "end_pin_name": "exec_in"
        },
        {
            "start_node_uuid": "transaction-input",
            "start_pin_name": "output_1",
            "end_node_uuid": "financial-dashboard",
            "end_pin_name": "transactions"
        },
        {
            "start_node_uuid": "transaction-input",
            "start_pin_name": "output_2",
            "end_node_uuid": "financial-dashboard",
            "end_pin_name": "starting_balance"
        },
        {
            "start_node_uuid": "category-analyzer",
            "start_pin_name": "output_1",
            "end_node_uuid": "financial-dashboard",
            "end_pin_name": "category_summary"
        },
        {
            "start_node_uuid": "category-analyzer",
            "start_pin_name": "output_2",
            "end_node_uuid": "financial-dashboard",
            "end_pin_name": "monthly_summary"
        },
        {
            "start_node_uuid": "category-analyzer",
            "start_pin_name": "output_3",
            "end_node_uuid": "financial-dashboard",
            "end_pin_name": "patterns"
        },
        {
            "start_node_uuid": "budget-calculator",
            "start_pin_name": "output_1",
            "end_node_uuid": "financial-dashboard",
            "end_pin_name": "total_income"
        },
        {
            "start_node_uuid": "budget-calculator",
            "start_pin_name": "output_2",
            "end_node_uuid": "financial-dashboard",
            "end_pin_name": "total_expenses"
        },
        {
            "start_node_uuid": "budget-calculator",
            "start_pin_name": "output_3",
            "end_node_uuid": "financial-dashboard",
            "end_pin_name": "net_change"
        },
        {
            "start_node_uuid": "budget-calculator",
            "start_pin_name": "output_4",
            "end_node_uuid": "financial-dashboard",
            "end_pin_name": "final_balance"
        },
        {
            "start_node_uuid": "budget-calculator",
            "start_pin_name": "output_5",
            "end_node_uuid": "financial-dashboard",
            "end_pin_name": "health_metrics"
        }
    ],
    "requirements": []
}